<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.naswork.dao.IncomeDao" >
  <resultMap id="BaseResultMap" type="com.naswork.model.Income" >
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="CLIENT_ORDER_ID" property="clientOrderId" jdbcType="INTEGER" />
    <result column="RECEIVE_DATE" property="receiveDate" jdbcType="DATE" />
    <result column="TOTAL_SUM" property="totalSum" jdbcType="DOUBLE" />
    <result column="REMARK" property="remark" jdbcType="VARCHAR" />
    <result column="UPDATE_TIMESTAMP" property="updateTimestamp" jdbcType="TIMESTAMP" />
    <result column="REF_NUMBER" property="refNumber" jdbcType="VARCHAR" />
    <result column="CLIENT_INVOICE_ID" property="clientInvoiceId" jdbcType="INTEGER" />
    <result column="TOTAL" property="total" jdbcType="DOUBLE" />
    <result column="TOTAL_COUNT" property="totalCount" jdbcType="DOUBLE" />
    <result column="INVOICE_NUMBER" property="invoiceNumber" jdbcType="VARCHAR" />
    <result column="ORDER_NUMBER" property="orderNumber" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    ID, CLIENT_ORDER_ID, RECEIVE_DATE, TOTAL_SUM, REMARK, UPDATE_TIMESTAMP, REF_NUMBER, 
    CLIENT_INVOICE_ID
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from income
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from income
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.naswork.model.Income" >
    insert into income (ID, CLIENT_ORDER_ID, RECEIVE_DATE, 
      TOTAL_SUM, REMARK, UPDATE_TIMESTAMP, 
      REF_NUMBER, CLIENT_INVOICE_ID)
    values (#{id,jdbcType=INTEGER}, #{clientOrderId,jdbcType=INTEGER}, #{receiveDate,jdbcType=DATE}, 
      #{totalSum,jdbcType=DOUBLE}, #{remark,jdbcType=VARCHAR}, #{updateTimestamp,jdbcType=TIMESTAMP}, 
      #{refNumber,jdbcType=VARCHAR}, #{clientInvoiceId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.naswork.model.Income" >
    insert into income
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="clientOrderId != null" >
        CLIENT_ORDER_ID,
      </if>
      <if test="receiveDate != null" >
        RECEIVE_DATE,
      </if>
      <if test="totalSum != null" >
        TOTAL_SUM,
      </if>
      <if test="remark != null" >
        REMARK,
      </if>
      <if test="updateTimestamp != null" >
        UPDATE_TIMESTAMP,
      </if>
      <if test="refNumber != null" >
        REF_NUMBER,
      </if>
      <if test="clientInvoiceId != null" >
        CLIENT_INVOICE_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="clientOrderId != null" >
        #{clientOrderId,jdbcType=INTEGER},
      </if>
      <if test="receiveDate != null" >
        #{receiveDate,jdbcType=DATE},
      </if>
      <if test="totalSum != null" >
        #{totalSum,jdbcType=DOUBLE},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="updateTimestamp != null" >
        #{updateTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="refNumber != null" >
        #{refNumber,jdbcType=VARCHAR},
      </if>
      <if test="clientInvoiceId != null" >
        #{clientInvoiceId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.naswork.model.Income" >
    update income
    <set >
      <if test="clientOrderId != null" >
        CLIENT_ORDER_ID = #{clientOrderId,jdbcType=INTEGER},
      </if>
      <if test="receiveDate != null" >
        RECEIVE_DATE = #{receiveDate,jdbcType=DATE},
      </if>
      <if test="totalSum != null" >
        TOTAL_SUM = #{totalSum,jdbcType=DOUBLE},
      </if>
      <if test="remark != null" >
        REMARK = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="updateTimestamp != null" >
        UPDATE_TIMESTAMP = #{updateTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="refNumber != null" >
        REF_NUMBER = #{refNumber,jdbcType=VARCHAR},
      </if>
      <if test="clientInvoiceId != null" >
        CLIENT_INVOICE_ID = #{clientInvoiceId,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.naswork.model.Income" >
    update income
    set CLIENT_ORDER_ID = #{clientOrderId,jdbcType=INTEGER},
      RECEIVE_DATE = #{receiveDate,jdbcType=DATE},
      TOTAL_SUM = #{totalSum,jdbcType=DOUBLE},
      REMARK = #{remark,jdbcType=VARCHAR},
      UPDATE_TIMESTAMP = #{updateTimestamp,jdbcType=TIMESTAMP},
      REF_NUMBER = #{refNumber,jdbcType=VARCHAR},
      CLIENT_INVOICE_ID = #{clientInvoiceId,jdbcType=INTEGER}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="IncomePage" parameterType="page" resultMap="BaseResultMap">
  	select ID, CLIENT_ORDER_ID, RECEIVE_DATE,vib.total AS TOTAL_SUM, REMARK, UPDATE_TIMESTAMP, REF_NUMBER, 
    	i.CLIENT_INVOICE_ID from income i LEFT JOIN v_income_bill vib ON 
		(i.id = vib.INCOME_ID) where i.CLIENT_INVOICE_ID = #{clientInvoiceId}
  </select>
  
  <select id="getIncomeTotal" parameterType="Integer" resultType="Double">
  		SELECT SUM(vib.TOTAL) from v_income_bill vib where vib.CLIENT_INVOICE_ID = #{clientInvoiceId} GROUP BY vib.CLIENT_INVOICE_ID
  </select>
  
  <select id="getInvoiceTotal" parameterType="Integer" resultType="Double">
  		SELECT vcib.client_invoice_price FROM v_client_invoice_bill vcib where vcib.client_invoice_id = #{clientInvoiceId}
  </select>
  
  <select id="listPage" parameterType="page" resultMap="BaseResultMap">
  		SELECT
			i.ID,
			i.RECEIVE_DATE,
			vib.TOTAL,
			vib.TOTAL_COUNT,
			ci.INVOICE_NUMBER,
			co.ORDER_NUMBER,
			i.UPDATE_TIMESTAMP
		FROM
			income i
		LEFT JOIN client_invoice ci ON (i.CLIENT_INVOICE_ID = ci.ID)
		LEFT JOIN client_order co ON (co.ID = ci.CLIENT_ORDER_ID)
		LEFT JOIN client_quote cq ON (cq.ID = co.CLIENT_QUOTE_ID)
		LEFT JOIN client_inquiry cci ON (cci.ID = cq.CLIENT_INQUIRY_ID)
		LEFT JOIN v_income_bill vib ON (vib.INCOME_ID = i.ID)
		LEFT JOIN client c ON (c.ID = cci.CLIENT_ID)
		<where>
			${where}
		</where>
		<if test="orderby != null">
			${orderby}
		</if>
  </select>
  
  
  <select id="getCompleteTotal" parameterType="Integer" resultType="Double">
  	SELECT
		SUM(IFNULL(coe.PRICE,0) * IFNULL(coe.AMOUNT,0))
	FROM
		income i
	LEFT JOIN client_invoice ci ON ci.ID = i.CLIENT_INVOICE_ID
	LEFT JOIN client_invoice_element cie ON cie.CLIENT_INVOICE_ID = ci.ID
	LEFT JOIN client_order_element coe ON coe.ID = cie.CLIENT_ORDER_ELEMENT_ID
	WHERE
		ci.INVOICE_STATUS_ID = 1
	AND ci.CLIENT_ORDER_ID = #{clientOrderId}
	GROUP BY ci.CLIENT_ORDER_ID
  </select>
  
  <select id="getUnCompleteTotal" parameterType="Integer" resultType="Double">
  	SELECT
		SUM(IFNULL(id.TOTAL,0))
	FROM
		income i
	LEFT JOIN client_invoice ci ON ci.ID = i.CLIENT_INVOICE_ID
	LEFT JOIN income_detail id ON id.INCOME_ID = i.ID
	WHERE
		ci.INVOICE_STATUS_ID = 0
	AND ci.CLIENT_ORDER_ID = #{clientOrderId}
	GROUP BY ci.CLIENT_ORDER_ID
  </select>
  
</mapper>