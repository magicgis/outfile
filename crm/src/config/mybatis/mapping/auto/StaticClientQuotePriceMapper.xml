<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.naswork.dao.StaticClientQuotePriceDao" >
  <resultMap id="BaseResultMap" type="com.naswork.model.StaticClientQuotePrice" >
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="CLIENT_ID" property="clientId" jdbcType="INTEGER" />
    <result column="PART_NUMBER" property="partNumber" jdbcType="VARCHAR" />
    <result column="PRICE" property="price" jdbcType="DOUBLE" />
    <result column="YEAR" property="year" jdbcType="INTEGER" />
    <result column="UPDATE_TIMESTAMP" property="updateTimestamp" jdbcType="TIMESTAMP" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="currency_value" property="currencyValue" jdbcType="VARCHAR" />
    <result column="CURRENCY_ID" property="currencyId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    ID, CLIENT_ID, PART_NUMBER, PRICE, YEAR, UPDATE_TIMESTAMP
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from static_client_quote_price
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from static_client_quote_price
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.naswork.model.StaticClientQuotePrice" >
    insert into static_client_quote_price (ID, CLIENT_ID, PART_NUMBER, 
      PRICE, YEAR, UPDATE_TIMESTAMP
      )
    values (#{id,jdbcType=INTEGER}, #{clientId,jdbcType=INTEGER}, #{partNumber,jdbcType=VARCHAR}, 
      #{price,jdbcType=DOUBLE}, #{year,jdbcType=INTEGER}, #{updateTimestamp,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.naswork.model.StaticClientQuotePrice" >
    insert into static_client_quote_price
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="clientId != null" >
        CLIENT_ID,
      </if>
      <if test="partNumber != null" >
        PART_NUMBER,
      </if>
      <if test="price != null" >
        PRICE,
      </if>
      <if test="year != null" >
        YEAR,
      </if>
      <if test="updateTimestamp != null" >
        UPDATE_TIMESTAMP,
      </if>
      <if test="currencyId != null" >
        CURRENCY_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="clientId != null" >
        #{clientId,jdbcType=INTEGER},
      </if>
      <if test="partNumber != null" >
        #{partNumber,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DOUBLE},
      </if>
      <if test="year != null" >
        #{year,jdbcType=INTEGER},
      </if>
      <if test="updateTimestamp != null" >
        #{updateTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="currencyId != null" >
        #{currencyId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.naswork.model.StaticClientQuotePrice" >
    update static_client_quote_price
    <set >
      <if test="clientId != null" >
        CLIENT_ID = #{clientId,jdbcType=INTEGER},
      </if>
      <if test="partNumber != null" >
        PART_NUMBER = #{partNumber,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        PRICE = #{price,jdbcType=DOUBLE},
      </if>
      <if test="year != null" >
        YEAR = #{year,jdbcType=INTEGER},
      </if>
      <if test="updateTimestamp != null" >
        UPDATE_TIMESTAMP = #{updateTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="currencyId != null" >
        CURRENCY_ID = #{currencyId,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.naswork.model.StaticClientQuotePrice" >
    update static_client_quote_price
    set CLIENT_ID = #{clientId,jdbcType=INTEGER},
      PART_NUMBER = #{partNumber,jdbcType=VARCHAR},
      PRICE = #{price,jdbcType=DOUBLE},
      YEAR = #{year,jdbcType=INTEGER},
      UPDATE_TIMESTAMP = #{updateTimestamp,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="listPage" parameterType="page" resultMap="BaseResultMap">
  		SELECT
			scqp.ID,
			scqp.PART_NUMBER,
			scqp.PRICE,
			scqp.`YEAR`,
			scqp.UPDATE_TIMESTAMP,
			c.`CODE`,
			currency.`VALUE` AS currency_value
		FROM
			static_client_quote_price scqp
		LEFT JOIN client c ON c.ID = scqp.CLIENT_ID
		LEFT JOIN system_code currency ON currency.ID = scqp.CURRENCY_ID
		<where>
			${where}
		</where>
		<if test="orderby">
			${orderby}
		</if>
  </select>
  
  <select id="findByCLientAndPart" parameterType="String" resultMap="BaseResultMap">
  		SELECT
			scqp.ID,
			scqp.CLIENT_ID,
			scqp.PART_NUMBER,
			scqp.PRICE,
			scqp.`YEAR`,
			scqp.UPDATE_TIMESTAMP,
			scqp.CURRENCY_ID
		FROM
			static_client_quote_price scqp
		WHERE
			scqp.CLIENT_ID = #{0}
		AND scqp.PART_NUMBER = #{1}
  </select>
  
  <select id="getClients" resultType="Integer">
  		SELECT DISTINCT scqp.CLIENT_ID FROM static_client_quote_price scqp
  </select>
  
  <select id="findByClientId" parameterType="Integer" resultType="Integer">
  		SELECT count(0) FROM static_client_quote_price scqp WHERE scqp.CLIENT_ID = #{clientId}
  </select>
  
</mapper>