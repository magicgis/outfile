<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.naswork.dao.SystemCodeDao" >
  <resultMap type="com.naswork.model.SystemCode" id="systemCode">
  	<result column="ID" property="id" jdbcType="INTEGER" />
    <result column="TYPE" property="type" jdbcType="VARCHAR" />
    <result column="CODE" property="code" jdbcType="VARCHAR" />
    <result column="VALUE" property="value" jdbcType="VARCHAR" />
    <result column="REMARK" property="remark" jdbcType="VARCHAR" />
    <result column="UPDATE_TIMESTAMP" property="updateTimestamp" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <resultMap id="listdateMap" type="com.naswork.module.marketing.controller.clientquote.ClientQuoteVo">
   <result column="RATE" property="exchangeRate" jdbcType="DOUBLE" />
   <result column="id" property="currency_id" jdbcType="INTEGER" />
   <result column="VALUE" property="currency_value" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    ID, TYPE, CODE, VALUE, REMARK, UPDATE_TIMESTAMP
  </sql>
  <select id="selectByPrimaryKey" resultMap="systemCode" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from system_code
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from system_code
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.naswork.model.SystemCode" >
    insert into system_code (ID, TYPE, CODE, 
      VALUE, REMARK, UPDATE_TIMESTAMP
      )
    values (#{id,jdbcType=INTEGER}, #{type,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, 
      #{value,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, #{updateTimestamp,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.naswork.model.SystemCode" >
    insert into system_code
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="type != null" >
        TYPE,
      </if>
      <if test="code != null" >
        CODE,
      </if>
      <if test="value != null" >
        VALUE,
      </if>
      <if test="remark != null" >
        REMARK,
      </if>
      <if test="updateTimestamp != null" >
        UPDATE_TIMESTAMP,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="code != null" >
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="value != null" >
        #{value,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="updateTimestamp != null" >
        #{updateTimestamp,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.naswork.model.SystemCode" >
    update system_code
    <set >
      <if test="type != null" >
        TYPE = #{type,jdbcType=VARCHAR},
      </if>
      <if test="code != null" >
        CODE = #{code,jdbcType=VARCHAR},
      </if>
      <if test="value != null" >
        VALUE = #{value,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        REMARK = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="updateTimestamp != null" >
        UPDATE_TIMESTAMP = #{updateTimestamp,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.naswork.model.SystemCode" >
    update system_code
    set TYPE = #{type,jdbcType=VARCHAR},
      CODE = #{code,jdbcType=VARCHAR},
      VALUE = #{value,jdbcType=VARCHAR},
      REMARK = #{remark,jdbcType=VARCHAR},
      UPDATE_TIMESTAMP = #{updateTimestamp,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 查询飞机类型 -->
  <select id="findairType" resultMap="systemCode">
  		select * from system_code where type='AIR_TYPE' order by code
  </select>
  
  <!-- 根据类型查询 -->
  <select id="findType" resultMap="systemCode" parameterType="String">
  		select * from system_code where type=#{type} 
  </select>
  
  <!-- 根据类型查询(带排序) -->
  <select id="findTypeSort" resultMap="systemCode" parameterType="String">
  		select * from system_code where type=#{type} order by value
  </select>
  
   <!-- 根据类型查询 -->
  <select id="findSupplierByType" resultMap="systemCode" parameterType="String">
  		select * from system_code where type=#{type} 
  </select>

  
  <!-- 主键查询 -->
  <select id="findById" resultMap="systemCode" parameterType="Integer">
  		select * from system_code where id=#{id} 
  </select>
  
  <!-- 查询汇率 -->
  <select id="findRate" resultMap="listdateMap">
  		select sc.id,sc.VALUE,er.RATE from system_code sc left join exchange_rate er on sc.ID=er.CURRENCY_ID where sc.TYPE='CURRENCY'
  </select>
  
  <select id="airPage" parameterType="page" resultMap="systemCode">
  		select * from system_code sc where sc.type = 'AIR_TYPE' 
  		<if test="orderby != null">
			${orderby}
		</if>
  </select>
  
  <select id="airForStockMarketPage" parameterType="page" resultMap="systemCode">
  		select * from system_code sc where sc.type = 'AIR_TYPE_FOR_STOCK_MARKET' 
  		<if test="orderby != null">
			${orderby}
		</if>
  </select>
  
  <select id="selectByCode" parameterType="page" resultMap="systemCode">
  		select * from system_code sc where sc.type = #{type} and sc.code = #{code}
  </select>
  
  <select id="getByCode" parameterType="String" resultMap="systemCode">
  		select * from system_code sc where sc.code = #{code}
  </select>
  
  <select id="getMaxId" resultType="Integer">
  		select max(id) from system_code 
  </select>
  
  <select id="businessPage" parameterType="page" resultMap="systemCode">
  		select * from system_code sc where sc.type = 'BIZ_TYPE'
  </select>
  
  <select id="selectByBizCode" parameterType="String" resultMap="systemCode">
  		select * from system_code sc where sc.type = 'BIZ_TYPE' and sc.code = #{code}
  </select>
  
  <select id="findByExportPackageInstructionsNumber" parameterType="String" resultType="Integer">
  		SELECT currency.ID from client c 
			LEFT JOIN export_package_instructions epi on epi.`CODE` = c.`CODE` 
			LEFT JOIN system_code currency on currency.ID = c.CURRENCY_ID
			WHERE epi.EXPORT_PACKAGE_INSTRUCTIONS_NUMBER = #{exportPackageInstructionsNumber}
  </select>
  
  <select id="findByAirCode" parameterType="Integer" resultMap="systemCode">
  		SELECT * FROM system_code air where air.`CODE` = #{airCode} AND air.TYPE = 'AIR_TYPE'
  </select>
   
  <select id="selectByValue" parameterType="String" resultMap="systemCode">
  		SELECT ID, TYPE, CODE, VALUE, REMARK, UPDATE_TIMESTAMP FROM system_code WHERE `VALUE` = #{value};
  </select>
  
  <select id="selectByAllCode" parameterType="String" resultMap="systemCode">
  		SELECT ID, TYPE, CODE, VALUE, REMARK, UPDATE_TIMESTAMP FROM system_code WHERE `CODE` = #{code};
  </select>
  
  <select id="findTypeSortWithCode" parameterType="String" resultMap="systemCode">
  	SELECT * FROM system_code sc WHERE sc.TYPE = #{type} ORDER BY sc.`CODE`
  </select>
  
  
</mapper>