<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans 
	  					   http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
					       http://www.springframework.org/schema/context 
					       http://www.springframework.org/schema/context/spring-context-4.1.xsd
						   http://www.springframework.org/schema/cache 
						   http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
						   http://www.springframework.org/schema/task 
						   http://www.springframework.org/schema/task/spring-task-4.1.xsd
						   http://www.springframework.org/schema/aop 
						   http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
						   http://www.springframework.org/schema/util 
						   http://www.springframework.org/schema/util/spring-util-4.1.xsd
						   http://www.springframework.org/schema/tx 
						   http://www.springframework.org/schema/tx/spring-tx-4.1.xsd"
						   
	   default-lazy-init="true">
	
	<!-- 使用Annotation自动注册Bean，解决事务失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.naswork"><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 自动为spring容器中配置@aspectJ切面的bean创建代理 -->
	<aop:aspectj-autoproxy />
	
	<!-- 注解式定时任务 -->
	<task:annotation-driven/>
    	
	<!-- ================= JBPM ================= -->
    <bean id="springHelper" class="org.jbpm.pvm.internal.processengine.SpringHelper" > 
    	<property name="jbpmCfg" value="config/jbpm.cfg.xml" />  
    </bean> 
    <bean id="processEngine" factory-bean="springHelper" factory-method="createProcessEngine" />  
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>  
	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>  
	<bean id="executionService" factory-bean="processEngine" factory-method="getExecutionService"/>  
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>  
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>  
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>
	
    <!--Hibernate SessionFatory -->  
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="mappingResources">  
            <list>  
                <value>jbpm.repository.hbm.xml</value>  
                <value>jbpm.execution.hbm.xml</value>  
                <value>jbpm.history.hbm.xml</value>  
                <value>jbpm.task.hbm.xml</value>  
                <value>jbpm.identity.hbm.xml</value>  
            </list>  
        </property>  
        <property name="hibernateProperties">  
            <props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">none</prop>  
                <prop key="hibernate.show_sql">true</prop>  
            </props>  
        </property>  
    </bean>  
  
    <!-- Transaction Manager -->  
    <bean id="transactionManager"  
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">  
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean>     
    
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 拦截器方式配置事务 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		 <tx:attributes>
       		<tx:method name="query*" propagation="REQUIRED" read-only="true" />
       		<tx:method name="find*" propagation="REQUIRED" read-only="true" />
       		<tx:method name="search*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
        </tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.naswork.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>
	
	
	<!-- ehCache -->
	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:config/ehcache.xml" />
		<property name="shared" value="true" />
	</bean>
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>
	<cache:annotation-driven cache-manager="cacheManager" />
	
	<!-- freeMarkker -->
	<bean id="freeMarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPaths" value="${template.loader_path}" />
		<property name="freemarkerSettings">
			<props>
				<prop key="defaultEncoding">${template.encoding}</prop>
				<prop key="url_escaping_charset">${url_escaping_charset}</prop>
				<prop key="locale">${locale}</prop>
				<prop key="template_update_delay">${template.update_delay}</prop>
				<prop key="tag_syntax">auto_detect</prop>
				<prop key="whitespace_stripping">true</prop>
				<prop key="classic_compatible">true</prop>
				<prop key="number_format">${template.number_format}</prop>
				<prop key="boolean_format">${template.boolean_format}</prop>
				<prop key="datetime_format">${template.datetime_format}</prop>
				<prop key="date_format">${template.date_format}</prop>
				<prop key="time_format">${template.time_format}</prop>
				<prop key="object_wrapper">freemarker.ext.beans.BeansWrapper</prop>
			</props>
		</property>
		<property name="freemarkerVariables">
			<map>
				<entry key="systemName" value="${system.name}" />
				<entry key="systemVersion" value="${system.version}" />
				<entry key="systemDescription" value="${system.description}" />
				<entry key="base" value="#{servletContext.contextPath}" />
				<entry key="locale" value="${locale}" />
			</map>
		</property>
	</bean>
	
	<!-- 开发环境配置 -->
	<beans profile="develop">
		<context:property-placeholder location="classpath*:/config/develop/main.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />
		<!-- 阿里 druid数据库连接池 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
	         <!-- 数据库基本信息配置 -->
	         <property name="url" value="${conn.url}" />  
	         <property name="username" value="${conn.username}" />  
	         <property name="password" value="${conn.password}" />  
	         <property name="driverClassName" value="${conn.driverClassName}" />  
	         <property name="filters" value="${conn.filters}" />  
	   		 <!-- 最大并发连接数 -->
	         <property name="maxActive" value="${conn.maxActive}" />
	         <!-- 初始化连接数量 -->
	         <property name="initialSize" value="${conn.initialSize}" />
	         <!-- 配置获取连接等待超时的时间 -->
	         <property name="maxWait" value="${conn.maxWait}" />
	         <!-- 最小空闲连接数 -->
	         <property name="minIdle" value="${conn.minIdle}" />  
	   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	         <property name="timeBetweenEvictionRunsMillis" value="${conn.timeBetweenEvictionRunsMillis}" />
	         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	         <property name="minEvictableIdleTimeMillis" value="${conn.minEvictableIdleTimeMillis}" />  
	         <property name="validationQuery" value="${conn.validationQuery}" />  
	         <property name="testWhileIdle" value="${conn.testWhileIdle}" />  
	         <property name="testOnBorrow" value="${conn.testOnBorrow}" />  
	         <property name="testOnReturn" value="${conn.testOnReturn}" />  
	         <property name="maxOpenPreparedStatements" value="${conn.maxOpenPreparedStatements}" />
	         <!-- 打开removeAbandoned功能 -->
	         <property name="removeAbandoned" value="${conn.removeAbandoned}" />
	         <!-- 1800秒，也就是30分钟 -->
	         <property name="removeAbandonedTimeout" value="${conn.removeAbandonedTimeout}" />
	         <!-- 关闭abanded连接时输出错误日志 -->   
	         <property name="logAbandoned" value="${conn.logAbandoned}" />
	         <property name="defaultAutoCommit" value="false" />
		</bean> 
	</beans>
	<!-- 生产环境配置 -->
	<beans profile="production">
		<context:property-placeholder location="classpath*:/config/production/main.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />
		<!-- 数据源 使用jndi-->
		<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
			<!-- tomcat JNDI -->
			<property name="jndiName">
				<value>java:comp/env/jdbc/oracle</value>
			</property>
			<property name="cache" value="false" />
			<property name="proxyInterface" value="javax.sql.DataSource" />
			
			<!-- weblogic JNDI  
			<property name="jndiName">
				<value>jcajJNDI</value>
			</property>
			<property name="cache" value="false" />
			<property name="proxyInterface" value="javax.sql.DataSource" />
			<property name="resourceRef">
				<value>false</value>
		    </property>  -->
		</bean>  
	</beans>
	<!-- 测试环境配置 -->
	<beans profile="test">
		<context:property-placeholder location="classpath*:/config/test/main.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />
		<!-- 阿里 druid数据库连接池 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
	         <!-- 数据库基本信息配置 -->
	         <property name="url" value="${conn.url}" />  
	         <property name="username" value="${conn.username}" />  
	         <property name="password" value="${conn.password}" />  
	         <property name="driverClassName" value="${conn.driverClassName}" />  
	         <property name="filters" value="${conn.filters}" />  
	   		 <!-- 最大并发连接数 -->
	         <property name="maxActive" value="${conn.maxActive}" />
	         <!-- 初始化连接数量 -->
	         <property name="initialSize" value="${conn.initialSize}" />
	         <!-- 配置获取连接等待超时的时间 -->
	         <property name="maxWait" value="${conn.maxWait}" />
	         <!-- 最小空闲连接数 -->
	         <property name="minIdle" value="${conn.minIdle}" />  
	   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	         <property name="timeBetweenEvictionRunsMillis" value="${conn.timeBetweenEvictionRunsMillis}" />
	         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	         <property name="minEvictableIdleTimeMillis" value="${conn.minEvictableIdleTimeMillis}" />  
	         <property name="validationQuery" value="${conn.validationQuery}" />  
	         <property name="testWhileIdle" value="${conn.testWhileIdle}" />  
	         <property name="testOnBorrow" value="${conn.testOnBorrow}" />  
	         <property name="testOnReturn" value="${conn.testOnReturn}" />  
	         <property name="maxOpenPreparedStatements" value="${conn.maxOpenPreparedStatements}" />
	         <!-- 打开removeAbandoned功能 -->
	         <property name="removeAbandoned" value="${conn.removeAbandoned}" />
	         <!-- 1800秒，也就是30分钟 -->
	         <property name="removeAbandonedTimeout" value="${conn.removeAbandonedTimeout}" />
	         <!-- 关闭abanded连接时输出错误日志 -->   
	         <property name="logAbandoned" value="${conn.logAbandoned}" />
		</bean> 
	</beans>
	
	
</beans>